#version 450 core
#pragma use_vulkan_memory_model
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_EXT_control_flow_attributes : enable

layout(binding=0) buffer InputA { float x[]; } inputA;
layout(binding=1) buffer InputB { vec4 x[]; } inputB;
layout(binding=2) buffer InputC { vec4 x[]; } inputC;
layout(binding=3) buffer Output { vec4 x[]; } outputO;

layout(local_size_x = X, local_size_y = Y, local_size_z = 1) in;

layout(constant_id = 6) const uint K = 1;
layout(constant_id = 7) const uint strideA = 1;
layout(constant_id = 8) const uint strideB = 1;
layout(constant_id = 9) const uint strideC = 1;
layout(constant_id = 10)const uint strideD = 1;


void main()
{
    uvec2 tileID = uvec2(gl_GlobalInvocationID.xy);
    vec4 C[8];
    float A[8];

    // Initialize result to zero
    [[unroll]] for (uint i = 0; i < 8; ++i) {
        C[i] = vec4(0.f, 0.f, 0.f, 0.f);
    }

    for (uint k = 0; k < 1024; k++) {
        [[unroll]] for (uint i = 0; i < 8; ++i) {
            A[i] = inputA.x[(tileID.y*8+i)*1024 + k];
        }
        vec4 B = inputB.x[k*1024/4 + tileID.x];
        [[unroll]] for (uint i = 0; i < 8; ++i) {
          C[i] += vec4(A[i], A[i], A[i], A[i])*B;
        }
    }

    [[unroll]] for (uint i = 0; i < 8; ++i) {
        outputO.x[(tileID.y*8+i) * 1024/4 + tileID.x] = C[i];
    }
}
