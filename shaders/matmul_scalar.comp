#version 450 core
#pragma use_vulkan_memory_model
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable

layout(binding=0) buffer InputA { float x[]; } inputA;
layout(binding=1) buffer InputB { float x[]; } inputB;
layout(binding=2) buffer InputC { float x[]; } inputC;
layout(binding=3) buffer Output { float x[]; } outputO;
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// M/N/K values filled out at pipeline creation time
layout(constant_id = 0) const uint lM = 1;
layout(constant_id = 1) const uint lN = 1;
layout(constant_id = 2) const uint lK = 1;
layout(constant_id = 3) const uint TILE_M = 1;
layout(constant_id = 4) const uint TILE_N = 1;
layout(constant_id = 5) const uint TILE_K = 1;
layout(constant_id = 6) const uint K = 1;
layout(constant_id = 7) const uint strideA = 1;
layout(constant_id = 8) const uint strideB = 1;
layout(constant_id = 9) const uint strideC = 1;
layout(constant_id = 10)const uint strideD = 1;

void main()
{
    uint i = gl_GlobalInvocationID.y;
    uint j = gl_GlobalInvocationID.x;
    float C = 0;//inputC.x[i * strideC + j];
    for(uint k = 0; k < K; ++k) {
      float A = inputA.x[strideA * i + k];
      float B = inputB.x[strideB * k + j];
      C += A*B;
    }    
    outputO.x[i * strideD + j] = C;
}
